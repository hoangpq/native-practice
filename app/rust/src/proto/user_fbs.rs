// automatically generated by the FlatBuffers compiler, do not modify


#![allow(dead_code)]
#![allow(unused_imports)]
extern crate flatbuffers;

pub mod users {
  #![allow(dead_code)]
  #![allow(unused_imports)]

    use std::mem;
    use std::cmp::Ordering;

    extern crate flatbuffers;
    use self::flatbuffers::EndianScalar;

    pub enum UserOffset {}
    #[derive(Copy, Clone, Debug, PartialEq)]

    pub struct User<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for User<'a> {
        type Inner = User<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self { _tab: flatbuffers::Table { buf: buf, loc: loc } }
        }
    }

    impl<'a> User<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            User { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args UserArgs<'args>,
        ) -> flatbuffers::WIPOffset<User<'bldr>> {
            let mut builder = UserBuilder::new(_fbb);
            if let Some(x) = args.name {
                builder.add_name(x);
            }
            builder.finish()
        }

        pub const VT_NAME: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn name(&self) -> Option<&'a str> {
            self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(
                User::VT_NAME,
                None,
            )
        }
    }

    pub struct UserArgs<'a> {
        pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for UserArgs<'a> {
        #[inline]
        fn default() -> Self {
            UserArgs { name: None }
        }
    }
    pub struct UserBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> UserBuilder<'a, 'b> {
        #[inline]
        pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                User::VT_NAME,
                name,
            );
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UserBuilder<'a, 'b> {
            let start = _fbb.start_table();
            UserBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<User<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    #[inline]
    pub fn get_root_as_user<'a>(buf: &'a [u8]) -> User<'a> {
        flatbuffers::get_root::<User<'a>>(buf)
    }

    #[inline]
    pub fn get_size_prefixed_root_as_user<'a>(buf: &'a [u8]) -> User<'a> {
        flatbuffers::get_size_prefixed_root::<User<'a>>(buf)
    }

    #[inline]
    pub fn finish_user_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<User<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_user_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<User<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod users
